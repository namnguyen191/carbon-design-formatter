{"version":3,"sources":["../node_modules/prettier sync","reportWebVitals.js","components/CodeEditor/index.js","components/CodeEditor/CodeEditor.jsx","components/GraphQLFormatter/index.js","components/GraphQLFormatter/GraphQLFormatter.jsx","utils/formatter.js","pages/LandingPage/index.js","pages/LandingPage/LandingPage.jsx","pages/RepoPage/RepoTable.jsx","pages/RepoPage/RepoPage.jsx","pages/RepoPage/index.js","components/Header/index.js","components/Header/AppHeader.jsx","App.jsx","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CodeEditor","props","initialValue","onChange","language","editorRef","useRef","className","onMount","editor","monaco","current","value","event","theme","height","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","tabSize","GraphQLFormatter","useState","str","setStr","graphql","setGraphql","curFocus","setCurFocus","convertOnClick","formattedGraphQL","input","trim","substring","length","replace","prettier","format","parser","plugins","graphQLParser","err","formattedStr","graphQLToString","console","log","defaultSize","width","onClick","src","process","alt","target","spellCheck","LandingPage","selected","role","tabIndex","Tabs","Tab","label","RepoTable","rows","headers","getRowDescription","rowId","row","find","description","DataTable","render","getHeaderProps","getRowProps","getTableProps","TableContainer","title","Table","TableHead","TableRow","TableExpandHeader","map","header","TableHeader","TableBody","Fragment","TableExpandRow","cells","cell","TableCell","TableExpandedRow","colSpan","REPO_QUERY","gql","key","LinkList","url","homepageUrl","style","display","Link","href","RepoPage","totalItems","setTotalItems","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","query","loading","error","data","DataTableSkeleton","columnCount","rowCount","message","repositories","organization","totalCount","stars","stargazers","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","getRowItems","nodes","slice","Pagination","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","page","AppHeader","HeaderContainer","isSideNavExpanded","onClickSideNavExpand","Header","aria-label","SkipToContent","HeaderMenuButton","isActive","HeaderName","element","to","prefix","HeaderNavigation","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar","HeaderGlobalAction","App","Content","exact","path","component","cache","InMemoryCache","httpLink","createHttpLink","uri","authLink","setContext","_","authorization","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","client","ApolloClient","link","concat","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c7d6de93.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 104;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CodeEditor from './CodeEditor';\n\nexport default CodeEditor;\n","import MonacoEditor from '@monaco-editor/react';\nimport React, { useRef } from 'react';\n\nconst CodeEditor = (props) => {\n  const { initialValue, onChange, language } = props;\n  const editorRef = useRef(null);\n\n  const handleEditorDidMount = (editor, monaco) => {\n    editorRef.current = editor;\n  };\n\n  const handleEditorChange = (value, event) => {\n    if (onChange) onChange(value);\n  };\n\n  return (\n    <div className=\"editor-wrapper\">\n      <MonacoEditor\n        onMount={handleEditorDidMount}\n        onChange={handleEditorChange}\n        value={initialValue}\n        theme=\"vs-dark\"\n        language={language ?? 'javascript'}\n        height=\"100%\"\n        options={{\n          wordWrap: 'on',\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n          tabSize: 2\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n","import GraphQLFormatter from './GraphQLFormatter';\n\nexport default GraphQLFormatter;\n","import React from 'react';\nimport { Resizable } from 're-resizable';\nimport CodeEditor from '../CodeEditor';\nimport { useState } from 'react';\nimport { graphQLToString, stringToGraphQL } from '../../utils/formatter';\n\nconst GraphQLFormatter = () => {\n  const [str, setStr] = useState('');\n  const [graphql, setGraphql] = useState('');\n  const [curFocus, setCurFocus] = useState();\n\n  const convertOnClick = () => {\n    if (curFocus === 'str') {\n      let formattedGraphQL;\n      try {\n        formattedGraphQL = stringToGraphQL(str);\n      } catch (err) {\n        setGraphql('Syntax Error!');\n        return;\n      }\n\n      setGraphql(formattedGraphQL);\n    } else if (curFocus === 'graphql') {\n      let formattedStr;\n      try {\n        formattedStr = graphQLToString(graphql);\n      } catch (err) {\n        setStr('Syntax Error!');\n        return;\n      }\n      setStr(formattedStr);\n    } else {\n      console.log('Fail to track focus: ', curFocus);\n    }\n  };\n\n  const onChange = (value) => {\n    setCurFocus('graphql');\n    setGraphql(value);\n  };\n\n  return (\n    <div className=\"graphql-formatter-container\">\n      <Resizable\n        defaultSize={{\n          width: 400,\n          height: 400\n        }}\n        onClick={() => setCurFocus('graphql')}\n      >\n        <CodeEditor\n          language=\"graphql\"\n          initialValue={graphql}\n          onChange={onChange}\n        />\n      </Resizable>\n      <img\n        src={process.env.PUBLIC_URL + '/221-arrow-10.gif'}\n        alt=\"Convert Button\"\n        onClick={() => {\n          convertOnClick();\n        }}\n      />\n      <Resizable\n        defaultSize={{\n          width: 400,\n          height: 400\n        }}\n        onClick={() => setCurFocus('str')}\n      >\n        <textarea\n          className=\"transformed-text\"\n          value={str}\n          onChange={(event) => {\n            setStr(event.target.value);\n            setCurFocus('str');\n          }}\n          spellCheck={false}\n        ></textarea>\n      </Resizable>\n    </div>\n  );\n};\n\nexport default GraphQLFormatter;\n","import prettier from 'prettier';\nimport graphQLParser from 'prettier/parser-graphql';\n\nexport const stringToGraphQL = (input) => {\n  input = input.trim();\n  if (input[0] === '\"') {\n    input = input.substring(1);\n  }\n  if (input[input.length-1] === '\"') {\n    input = input.substring(0, input.length-1);\n  }\n  input = input.replace(/\\\\/g, '');\n  input = prettier.format(input, {\n    parser: 'graphql',\n    plugins: [graphQLParser]\n  });\n  return input;\n};\n\nexport const graphQLToString = (input) => {\n  input = input\n    .replace(/\"/g, '\\\\\"')\n    .replace(/\\r?\\n|\\r/g, ' ')\n    .replace(/\\s\\s/g, '');\n\n  return `\"${input}\"`\n};\n","import LandingPage from './LandingPage';\n\nexport default LandingPage;\n","import React from 'react';\nimport { Tabs, Tab } from 'carbon-components-react';\nimport GraphQLFormatter from '../../components/GraphQLFormatter';\n\nconst LandingPage = () => {\n  const props = {\n    tabs: {\n      selected: 0,\n      role: 'navigation'\n    },\n    tab: {\n      role: 'presentation',\n      tabIndex: 0\n    }\n  };\n\n  return (\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\n      <div className=\"bx--row landing-page__banner\">\n        <div className=\"bx--col-lg-16\">\n          <h1 className=\"landing-page__heading\">\n            Design &amp; build with Carbon\n          </h1>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r2\">\n        <div className=\"bx--col bx--no-gutter\">\n          <Tabs {...props.tabs}>\n            <Tab {...props.tab} label=\"GraphQL\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">GraphQL Query</h2>\n                    {/* <Resizable direction=\"vertical\">\n                      <div\n                        style={{\n                          height: 'calc(100% - 10px)',\n                          display: 'flex',\n                          flexDirection: 'row'\n                        }}\n                      >\n                        <Resizable direction=\"horizontal\">\n                          <CodeEditor\n                            initialValue={'hello'}\n                            onChange={(value) => console.log(value)}\n                          />\n                        </Resizable>\n                      </div>\n                    </Resizable> */}\n                    <GraphQLFormatter />\n                  </div>\n                  {/* <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div> */}\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"Transformation\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    Not yet supported! So do it yourself u lazy bump\n                  </div>\n                </div>\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import React from 'react';\n\nimport {\n  DataTable,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableExpandHeader,\n  TableHeader,\n  TableBody,\n  TableExpandRow,\n  TableCell,\n  TableExpandedRow\n} from 'carbon-components-react';\n\nconst RepoTable = ({ rows, headers }) => {\n  const getRowDescription = (rowId) => {\n    const row = rows.find(({ id }) => id === rowId);\n    return row ? row.description : '';\n  };\n\n  return (\n    <DataTable\n      rows={rows}\n      headers={headers}\n      render={({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getTableProps\n      }) => (\n        <TableContainer\n          title=\"Carbon Repositories\"\n          description=\"A collection of public Carbon repositories.\"\n        >\n          <Table {...getTableProps()}>\n            <TableHead>\n              <TableRow>\n                <TableExpandHeader />\n                {headers.map((header) => (\n                  <TableHeader {...getHeaderProps({ header })}>\n                    {header.header}\n                  </TableHeader>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => (\n                <React.Fragment key={row.id}>\n                  <TableExpandRow {...getRowProps({ row })}>\n                    {row.cells.map((cell) => (\n                      <TableCell key={cell.id}>{cell.value}</TableCell>\n                    ))}\n                  </TableExpandRow>\n                  <TableExpandedRow colSpan={headers.length + 1}>\n                    <p>{getRowDescription(row.id)}</p>\n                  </TableExpandedRow>\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    />\n  );\n};\n\nexport default RepoTable;\n","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\n\nimport RepoTable from './RepoTable';\nimport { useState } from 'react';\n\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst headers = [\n  {\n    key: 'name',\n    header: 'Name'\n  },\n  {\n    key: 'createdAt',\n    header: 'Created'\n  },\n  {\n    key: 'updatedAt',\n    header: 'Updated'\n  },\n  {\n    key: 'issueCount',\n    header: 'Open Issues'\n  },\n  {\n    key: 'stars',\n    header: 'Stars'\n  },\n  {\n    key: 'links',\n    header: 'Links'\n  }\n];\n\nconst LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n\nconst getRowItems = (rows) =>\n  rows.map((row) => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />\n  }));\n\nconst RepoPage = () => {\n  const [totalItems, setTotalItems] = useState(0);\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\n      <div className=\"bx--row repo-page__r1\">\n        <div className=\"bx--col-lg-16\">\n          <Query query={REPO_QUERY}>\n            {({ loading, error, data }) => {\n              // Wait for the request to complete\n              if (loading)\n                return (\n                  <DataTableSkeleton\n                    columnCount={headers.length + 1}\n                    rowCount={10}\n                    headers={headers}\n                  />\n                );\n\n              // Something went wrong with the data fetching\n              if (error) return `Error! ${error.message}`;\n\n              // If we're here, we've got our data!\n              const { repositories } = data.organization;\n              setTotalItems(repositories.totalCount);\n              const rows = getRowItems(repositories.nodes);\n\n              return (\n                <>\n                  <RepoTable\n                    headers={headers}\n                    rows={rows.slice(\n                      firstRowIndex,\n                      firstRowIndex + currentPageSize\n                    )}\n                  />\n                  <Pagination\n                    totalItems={totalItems}\n                    backwardText=\"Previous page\"\n                    forwardText=\"Next page\"\n                    pageSize={currentPageSize}\n                    pageSizes={[5, 10, 15, 25]}\n                    itemsPerPageText=\"Items per page\"\n                    onChange={({ page, pageSize }) => {\n                      if (pageSize !== currentPageSize) {\n                        setCurrentPageSize(pageSize);\n                      }\n                      setFirstRowIndex(pageSize * (page - 1));\n                    }}\n                  />\n                </>\n              );\n            }}\n          </Query>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RepoPage;\n","import RepoPage from './RepoPage';\n\nexport default RepoPage;\n","import AppHeader from './AppHeader';\n\nexport default AppHeader;\n","import React from 'react';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems\n} from 'carbon-components-react';\nimport { Link } from 'react-router-dom';\nimport {\n  AppSwitcher20,\n  Notification20,\n  UserAvatar20\n} from '@carbon/icons-react';\n\nconst AppHeader = () => {\n  return (\n    <HeaderContainer\n      render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n        <Header aria-label=\"IBM Carbon Formatter\">\n          <SkipToContent />\n          <HeaderMenuButton\n            aria-label=\"Open menu\"\n            onClick={onClickSideNavExpand}\n            isActive={isSideNavExpanded}\n          />\n          <HeaderName element={Link} to=\"/\" prefix=\"IBM Carbon\">\n            IBM Formatter\n          </HeaderName>\n          <HeaderNavigation aria-label=\"Codes Repo\">\n            <HeaderMenuItem element={Link} to=\"/repos\">\n              GitHub Repo\n            </HeaderMenuItem>\n          </HeaderNavigation>\n          <SideNav\n            aria-label=\"Side navigation\"\n            expanded={isSideNavExpanded}\n            isPersistent={false}\n          >\n            <SideNavItems>\n              <HeaderSideNavItems>\n                <HeaderMenuItem element={Link} to=\"/repos\">\n                  GitHub Repo\n                </HeaderMenuItem>\n              </HeaderSideNavItems>\n            </SideNavItems>\n          </SideNav>\n          <HeaderGlobalBar>\n            <HeaderGlobalAction aria-label=\"Notifications\">\n              <Notification20 />\n            </HeaderGlobalAction>\n            <HeaderGlobalAction aria-label=\"User Avatar\">\n              <UserAvatar20 />\n            </HeaderGlobalAction>\n            <HeaderGlobalAction aria-label=\"App Switcher\">\n              <AppSwitcher20 />\n            </HeaderGlobalAction>\n          </HeaderGlobalBar>\n        </Header>\n      )}\n    />\n  );\n};\n\nexport default AppHeader;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Content } from 'carbon-components-react';\n\nimport LandingPage from './pages/LandingPage';\nimport RepoPage from './pages/RepoPage';\nimport AppHeader from './components/Header';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <>\n      <AppHeader />\n      <Content>\n        <Switch>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route path=\"/repos\" component={RepoPage} />\n        </Switch>\n      </Content>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\nimport { setContext } from 'apollo-link-context';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport './index.scss';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  cache,\n  link: authLink.concat(httpLink)\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}