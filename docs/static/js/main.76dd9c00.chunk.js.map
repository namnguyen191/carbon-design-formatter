{"version":3,"sources":["reportWebVitals.js","components/CodeEditor/index.js","components/CodeEditor/CodeEditor.jsx","components/GraphQLFormatter/index.js","components/GraphQLFormatter/GraphQLFormatter.jsx","utils/formatter.js","pages/LandingPage/index.js","pages/LandingPage/LandingPage.jsx","pages/RepoPage/RepoTable.jsx","pages/RepoPage/RepoPage.jsx","pages/RepoPage/index.js","components/Header/index.js","components/Header/AppHeader.jsx","App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CodeEditor","props","initialValue","onChange","language","editorRef","useRef","className","onMount","editor","monaco","current","value","event","theme","height","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","tabSize","GraphQLFormatter","useState","str","setStr","graphql","setGraphql","curFocus","setCurFocus","convertOnClick","formattedGraphQL","input","replace","prettier","format","parser","plugins","graphQLParser","err","formattedStr","console","log","graphQLToString","defaultSize","width","src","alt","onClick","target","spellCheck","LandingPage","selected","role","tabIndex","Tabs","Tab","label","RepoTable","rows","headers","getRowDescription","rowId","row","find","id","description","DataTable","render","getHeaderProps","getRowProps","getTableProps","TableContainer","title","Table","TableHead","TableRow","TableExpandHeader","map","header","TableHeader","TableBody","Fragment","TableExpandRow","cells","cell","TableCell","TableExpandedRow","colSpan","length","REPO_QUERY","gql","key","LinkList","url","homepageUrl","style","display","Link","href","RepoPage","totalItems","setTotalItems","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","query","loading","error","data","DataTableSkeleton","columnCount","rowCount","message","repositories","organization","totalCount","stars","stargazers","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","getRowItems","nodes","slice","Pagination","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","page","AppHeader","HeaderContainer","isSideNavExpanded","onClickSideNavExpand","Header","aria-label","SkipToContent","HeaderMenuButton","isActive","HeaderName","element","to","prefix","HeaderNavigation","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar","HeaderGlobalAction","App","Content","exact","path","component","cache","InMemoryCache","httpLink","createHttpLink","uri","authLink","setContext","_","authorization","process","client","ApolloClient","link","concat","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.76dd9c00.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import CodeEditor from './CodeEditor';\r\n\r\nexport default CodeEditor;\r\n","import MonacoEditor from '@monaco-editor/react';\r\nimport React, { useRef } from 'react';\r\nimport prettier from 'prettier';\r\nimport parser from 'prettier/parser-babel';\r\n\r\nconst CodeEditor = (props) => {\r\n  const { initialValue, onChange, language } = props;\r\n  const editorRef = useRef(null);\r\n\r\n  const handleEditorDidMount = (editor, monaco) => {\r\n    editorRef.current = editor;\r\n  };\r\n\r\n  const handleEditorChange = (value, event) => {\r\n    if (onChange) onChange(value);\r\n  };\r\n\r\n  const onFormatClick = () => {\r\n    const unformatted = editorRef.current?.getValue();\r\n\r\n    const formatted = prettier\r\n      .format(unformatted ?? '', {\r\n        parser: 'babel',\r\n        plugins: [parser],\r\n        useTabs: false,\r\n        semi: true,\r\n        singleQuote: true\r\n      })\r\n      .replace(/\\n$/, '');\r\n\r\n    editorRef.current?.setValue(formatted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"editor-wrapper\">\r\n      <MonacoEditor\r\n        onMount={handleEditorDidMount}\r\n        onChange={handleEditorChange}\r\n        value={initialValue}\r\n        theme=\"vs-dark\"\r\n        language={language ?? 'javascript'}\r\n        height=\"100%\"\r\n        options={{\r\n          wordWrap: 'on',\r\n          minimap: { enabled: false },\r\n          showUnused: false,\r\n          folding: false,\r\n          lineNumbersMinChars: 3,\r\n          fontSize: 16,\r\n          scrollBeyondLastLine: false,\r\n          automaticLayout: true,\r\n          tabSize: 2\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","import GraphQLFormatter from './GraphQLFormatter';\r\n\r\nexport default GraphQLFormatter;\r\n","import React from 'react';\r\nimport { Resizable } from 're-resizable';\r\nimport CodeEditor from '../CodeEditor';\r\nimport { useState } from 'react';\r\nimport { graphQLToString, stringToGraphQL } from '../../utils/formatter';\r\n\r\nconst GraphQLFormatter = () => {\r\n  const [str, setStr] = useState('');\r\n  const [graphql, setGraphql] = useState('');\r\n  const [curFocus, setCurFocus] = useState();\r\n\r\n  const convertOnClick = () => {\r\n    if (curFocus === 'str') {\r\n      let formattedGraphQL;\r\n      try {\r\n        formattedGraphQL = stringToGraphQL(str);\r\n      } catch (err) {\r\n        setGraphql('Syntax Error!');\r\n        return;\r\n      }\r\n\r\n      setGraphql(formattedGraphQL);\r\n    } else if (curFocus === 'graphql') {\r\n      let formattedStr;\r\n      try {\r\n        console.log(graphql);\r\n        formattedStr = graphQLToString(graphql);\r\n      } catch (err) {\r\n        setStr('Syntax Error!');\r\n        return;\r\n      }\r\n      setStr(formattedStr);\r\n    } else {\r\n      console.log('Fail to track focus: ', curFocus);\r\n    }\r\n  };\r\n\r\n  const onChange = (value) => {\r\n    setCurFocus('graphql');\r\n    setGraphql(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graphql-formatter-container\">\r\n      <Resizable\r\n        defaultSize={{\r\n          width: 400,\r\n          height: 400\r\n        }}\r\n      >\r\n        <CodeEditor\r\n          language=\"graphql\"\r\n          initialValue={graphql}\r\n          onChange={onChange}\r\n        />\r\n      </Resizable>\r\n      <img\r\n        src={process.env.PUBLIC_URL + '/221-arrow-10.gif'}\r\n        alt=\"Convert Button\"\r\n        onClick={() => {\r\n          convertOnClick();\r\n        }}\r\n      />\r\n      <Resizable\r\n        defaultSize={{\r\n          width: 400,\r\n          height: 400\r\n        }}\r\n      >\r\n        <textarea\r\n          className=\"transformed-text\"\r\n          value={str}\r\n          onChange={(event) => {\r\n            setStr(event.target.value);\r\n            setCurFocus('str');\r\n          }}\r\n          spellCheck={false}\r\n        ></textarea>\r\n      </Resizable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphQLFormatter;\r\n","import prettier from 'prettier';\r\nimport graphQLParser from 'prettier/parser-graphql';\r\n\r\nexport const stringToGraphQL = (input) => {\r\n  input = input.replace(/\\//g, '');\r\n  input = prettier.format(input, {\r\n    parser: 'graphql',\r\n    plugins: [graphQLParser]\r\n  });\r\n  return input;\r\n};\r\n\r\nexport const graphQLToString = (input) => {\r\n  return input\r\n    .replace(/\"/g, '/\"')\r\n    .replace(/\\r?\\n|\\r/g, '')\r\n    .replace(/\\s\\s/g, '');\r\n};\r\n","import LandingPage from './LandingPage';\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\r\nimport { Tabs, Tab } from 'carbon-components-react';\r\nimport GraphQLFormatter from '../../components/GraphQLFormatter';\r\n\r\nconst LandingPage = () => {\r\n  const props = {\r\n    tabs: {\r\n      selected: 0,\r\n      role: 'navigation'\r\n    },\r\n    tab: {\r\n      role: 'presentation',\r\n      tabIndex: 0\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\r\n      <div className=\"bx--row landing-page__banner\">\r\n        <div className=\"bx--col-lg-16\">\r\n          <h1 className=\"landing-page__heading\">\r\n            Design &amp; build with Carbon\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"bx--row landing-page__r2\">\r\n        <div className=\"bx--col bx--no-gutter\">\r\n          <Tabs {...props.tabs}>\r\n            <Tab {...props.tab} label=\"GraphQL\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\r\n                    <h2 className=\"landing-page__subheading\">GraphQL Query</h2>\r\n                    {/* <Resizable direction=\"vertical\">\r\n                      <div\r\n                        style={{\r\n                          height: 'calc(100% - 10px)',\r\n                          display: 'flex',\r\n                          flexDirection: 'row'\r\n                        }}\r\n                      >\r\n                        <Resizable direction=\"horizontal\">\r\n                          <CodeEditor\r\n                            initialValue={'hello'}\r\n                            onChange={(value) => console.log(value)}\r\n                          />\r\n                        </Resizable>\r\n                      </div>\r\n                    </Resizable> */}\r\n                    <GraphQLFormatter />\r\n                  </div>\r\n                  {/* <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\r\n                    <img\r\n                      className=\"landing-page__illo\"\r\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\r\n                      alt=\"Carbon illustration\"\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab {...props.tab} label=\"Transformation\">\r\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\r\n                <div className=\"bx--row landing-page__tab-content\">\r\n                  <div className=\"bx--col-lg-16\">\r\n                    Rapidly build beautiful and accessible experiences. The\r\n                    Carbon kit contains all resources you need to get started.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\r\n\r\nimport {\r\n  DataTable,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableExpandHeader,\r\n  TableHeader,\r\n  TableBody,\r\n  TableExpandRow,\r\n  TableCell,\r\n  TableExpandedRow\r\n} from 'carbon-components-react';\r\n\r\nconst RepoTable = ({ rows, headers }) => {\r\n  const getRowDescription = (rowId) => {\r\n    const row = rows.find(({ id }) => id === rowId);\r\n    return row ? row.description : '';\r\n  };\r\n\r\n  return (\r\n    <DataTable\r\n      rows={rows}\r\n      headers={headers}\r\n      render={({\r\n        rows,\r\n        headers,\r\n        getHeaderProps,\r\n        getRowProps,\r\n        getTableProps\r\n      }) => (\r\n        <TableContainer\r\n          title=\"Carbon Repositories\"\r\n          description=\"A collection of public Carbon repositories.\"\r\n        >\r\n          <Table {...getTableProps()}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableExpandHeader />\r\n                {headers.map((header) => (\r\n                  <TableHeader {...getHeaderProps({ header })}>\r\n                    {header.header}\r\n                  </TableHeader>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <React.Fragment key={row.id}>\r\n                  <TableExpandRow {...getRowProps({ row })}>\r\n                    {row.cells.map((cell) => (\r\n                      <TableCell key={cell.id}>{cell.value}</TableCell>\r\n                    ))}\r\n                  </TableExpandRow>\r\n                  <TableExpandedRow colSpan={headers.length + 1}>\r\n                    <p>{getRowDescription(row.id)}</p>\r\n                  </TableExpandedRow>\r\n                </React.Fragment>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RepoTable;\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { Query } from 'react-apollo';\r\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\r\n\r\nimport RepoTable from './RepoTable';\r\nimport { useState } from 'react';\r\n\r\nconst REPO_QUERY = gql`\r\n  query REPO_QUERY {\r\n    # Let's use carbon as our organization\r\n    organization(login: \"carbon-design-system\") {\r\n      # We'll grab all the repositories in one go. To load more resources\r\n      # continuously, see the advanced topics.\r\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\r\n        totalCount\r\n        nodes {\r\n          url\r\n          homepageUrl\r\n          issues(filterBy: { states: OPEN }) {\r\n            totalCount\r\n          }\r\n          stargazers {\r\n            totalCount\r\n          }\r\n          releases(first: 1) {\r\n            totalCount\r\n            nodes {\r\n              name\r\n            }\r\n          }\r\n          name\r\n          updatedAt\r\n          createdAt\r\n          description\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst headers = [\r\n  {\r\n    key: 'name',\r\n    header: 'Name'\r\n  },\r\n  {\r\n    key: 'createdAt',\r\n    header: 'Created'\r\n  },\r\n  {\r\n    key: 'updatedAt',\r\n    header: 'Updated'\r\n  },\r\n  {\r\n    key: 'issueCount',\r\n    header: 'Open Issues'\r\n  },\r\n  {\r\n    key: 'stars',\r\n    header: 'Stars'\r\n  },\r\n  {\r\n    key: 'links',\r\n    header: 'Links'\r\n  }\r\n];\r\n\r\nconst LinkList = ({ url, homepageUrl }) => (\r\n  <ul style={{ display: 'flex' }}>\r\n    <li>\r\n      <Link href={url}>GitHub</Link>\r\n    </li>\r\n    {homepageUrl && (\r\n      <li>\r\n        <span>&nbsp;|&nbsp;</span>\r\n        <Link href={homepageUrl}>Homepage</Link>\r\n      </li>\r\n    )}\r\n  </ul>\r\n);\r\n\r\nconst getRowItems = (rows) =>\r\n  rows.map((row) => ({\r\n    ...row,\r\n    key: row.id,\r\n    stars: row.stargazers.totalCount,\r\n    issueCount: row.issues.totalCount,\r\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\r\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\r\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />\r\n  }));\r\n\r\nconst RepoPage = () => {\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\r\n  const [currentPageSize, setCurrentPageSize] = useState(10);\r\n\r\n  return (\r\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\r\n      <div className=\"bx--row repo-page__r1\">\r\n        <div className=\"bx--col-lg-16\">\r\n          <Query query={REPO_QUERY}>\r\n            {({ loading, error, data }) => {\r\n              // Wait for the request to complete\r\n              if (loading)\r\n                return (\r\n                  <DataTableSkeleton\r\n                    columnCount={headers.length + 1}\r\n                    rowCount={10}\r\n                    headers={headers}\r\n                  />\r\n                );\r\n\r\n              // Something went wrong with the data fetching\r\n              if (error) return `Error! ${error.message}`;\r\n\r\n              // If we're here, we've got our data!\r\n              const { repositories } = data.organization;\r\n              setTotalItems(repositories.totalCount);\r\n              const rows = getRowItems(repositories.nodes);\r\n\r\n              return (\r\n                <>\r\n                  <RepoTable\r\n                    headers={headers}\r\n                    rows={rows.slice(\r\n                      firstRowIndex,\r\n                      firstRowIndex + currentPageSize\r\n                    )}\r\n                  />\r\n                  <Pagination\r\n                    totalItems={totalItems}\r\n                    backwardText=\"Previous page\"\r\n                    forwardText=\"Next page\"\r\n                    pageSize={currentPageSize}\r\n                    pageSizes={[5, 10, 15, 25]}\r\n                    itemsPerPageText=\"Items per page\"\r\n                    onChange={({ page, pageSize }) => {\r\n                      if (pageSize !== currentPageSize) {\r\n                        setCurrentPageSize(pageSize);\r\n                      }\r\n                      setFirstRowIndex(pageSize * (page - 1));\r\n                    }}\r\n                  />\r\n                </>\r\n              );\r\n            }}\r\n          </Query>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoPage;\r\n","import RepoPage from './RepoPage';\r\n\r\nexport default RepoPage;\r\n","import AppHeader from './AppHeader';\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport {\r\n  Header,\r\n  HeaderContainer,\r\n  HeaderName,\r\n  HeaderNavigation,\r\n  HeaderMenuButton,\r\n  HeaderMenuItem,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SkipToContent,\r\n  SideNav,\r\n  SideNavItems,\r\n  HeaderSideNavItems\r\n} from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  AppSwitcher20,\r\n  Notification20,\r\n  UserAvatar20\r\n} from '@carbon/icons-react';\r\n\r\nconst AppHeader = () => {\r\n  return (\r\n    <HeaderContainer\r\n      render={({ isSideNavExpanded, onClickSideNavExpand }) => (\r\n        <Header aria-label=\"IBM Carbon Formatter\">\r\n          <SkipToContent />\r\n          <HeaderMenuButton\r\n            aria-label=\"Open menu\"\r\n            onClick={onClickSideNavExpand}\r\n            isActive={isSideNavExpanded}\r\n          />\r\n          <HeaderName element={Link} to=\"/\" prefix=\"IBM Carbon\">\r\n            IBM Formatter\r\n          </HeaderName>\r\n          <HeaderNavigation aria-label=\"Codes Repo\">\r\n            <HeaderMenuItem element={Link} to=\"/repos\">\r\n              GitHub Repo\r\n            </HeaderMenuItem>\r\n          </HeaderNavigation>\r\n          <SideNav\r\n            aria-label=\"Side navigation\"\r\n            expanded={isSideNavExpanded}\r\n            isPersistent={false}\r\n          >\r\n            <SideNavItems>\r\n              <HeaderSideNavItems>\r\n                <HeaderMenuItem element={Link} to=\"/repos\">\r\n                  GitHub Repo\r\n                </HeaderMenuItem>\r\n              </HeaderSideNavItems>\r\n            </SideNavItems>\r\n          </SideNav>\r\n          <HeaderGlobalBar>\r\n            <HeaderGlobalAction aria-label=\"Notifications\">\r\n              <Notification20 />\r\n            </HeaderGlobalAction>\r\n            <HeaderGlobalAction aria-label=\"User Avatar\">\r\n              <UserAvatar20 />\r\n            </HeaderGlobalAction>\r\n            <HeaderGlobalAction aria-label=\"App Switcher\">\r\n              <AppSwitcher20 />\r\n            </HeaderGlobalAction>\r\n          </HeaderGlobalBar>\r\n        </Header>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Content } from 'carbon-components-react';\n\nimport LandingPage from './pages/LandingPage';\nimport RepoPage from './pages/RepoPage';\nimport AppHeader from './components/Header';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <>\n      <AppHeader />\n      <Content>\n        <Switch>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route path=\"/repos\" component={RepoPage} />\n        </Switch>\n      </Content>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\nimport { setContext } from 'apollo-link-context';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport './index.scss';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`\n    }\n  };\n});\n\nconsole.log(process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN);\n\nconst client = new ApolloClient({\n  cache,\n  link: authLink.concat(httpLink)\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}